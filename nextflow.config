// Copyright (C) 2022,2023 Genome Research Ltd.

params {
    results_dir = "./nextflow_results"
    reference_manifest = "./reference_manifest.csv"
    sequencing_manifest = ""
    variant_caller = "medaka"
    clair3_args = ""
    min_barcode_dir_size = 10
    help = false
    generic_config_base = "https://raw.githubusercontent.com/sanger-pathogens/nextflow-commons"
    generic_config_version = "master"
    generic_config_url = ""
}
inherit_generic_config()



// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

process {
    withName:NANOPLOT_QC {
        cpus = 2
    }
}

profiles {

    standard {
        docker {
            enabled = true
            runOptions = '-v "/mnt":"/mnt"'
        }
    }

    sanger_local {
        docker {
            enabled = false
        }

        singularity {
            enabled = true
            autoMounts = true
            cacheDir = "${PWD}"
            runOptions = "--bind /lustre,/nfs,/software,/data"
        }
    }

    sanger_lsf {
        executor = "lsf"
        // LSF options
        queue_size = 50
        submit_rate_limit = '50/2min

        docker {
            enabled = false
        }

        singularity {
            enabled = true
            autoMounts = true
            cacheDir = "${PWD}"
            runOptions = "--bind /lustre,/nfs,/software,/data"
        }
    }
}

// Helper functions
def inherit_generic_config() {
    config_url = params.generic_config_url ? params.generic_config_url : "${params.generic_config_base}/${params.generic_config_version}/configs/nextflow.config"
    try {
        includeConfig "${config_url}"
    } catch (Exception e) {
        System.err.println("ERROR: Could not load generic config: ${config_url}")
        System.err.println("Encountered the following exception:")
        throw e
    }
}
